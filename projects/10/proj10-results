Script started on Sat 20 Apr 2019 07:06:37 PM EDT
smw42@gold33:~/CS214/projects/10/java$ cat Bird.java Birds.java FlyingBird.java WalkingBird.java Duck.java Goose.java Owl.java Penguin.java Ostrich. 
java Kiwi.java
/* Bird.java provides a Bird class.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Sarah Whitten
 * Date: April 20, 2019
 ******************************************************/

import java.io.*;

public abstract class Bird
{
    /* default constructor
     * PostCond: myName == "".
     */
    public Bird()
    {
        myName = "";
    }

    /* explicit constructor
     * Receive: name, a String 
     * PostCond: myName == name.
     */
    public Bird(String name)
    {
        myName = name;
    }

    /* Name accessor
     * Return: myName.
     */
    public String getName()
    {
        return myName;
    }

    /* A Bird's Call
     * Return: a default bird-call ("Squawk!").
     */
    public String call()
    {
        return "Squawk!";
    }

    public abstract String movement();

    /* Output a Bird 
     * Output: Everything known about myself
     *          to the standard output stream.
     */
    public void print()
    {
        System.out.println( getName() + ' ' + getClass().getName()
                            + " just " + movement() + " and said " + call() );
    }

  	private String myName;
}

/* Birds.java illustrates inheritance and polymorphism.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Sarah Whitten
 * Date: April 20, 2019
 *********************************************************/

public class Birds {
  
  	public static void main(String[] args) {
      	System.out.println("\nWelcome to the Bird Park!\n");

      	// Bird bird0 = new Bird();

    	FlyingBird bird1 = new FlyingBird("Hawkeye");
	    bird1.print();

	    Duck bird2 = new Duck("Donald");
	    bird2.print();

	    Goose bird3 = new Goose("Mother");
	    bird3.print();

	    Owl bird4 = new Owl("Woodsey");
	    bird4.print();

	    Penguin bird5 = new Penguin("Pingu");
	    bird5.print();

	    Ostrich bird6 = new Ostrich("Orla");
	    bird6.print();

	    Kiwi bird7 = new Kiwi("Kellie");
	    bird7.print();

	    System.out.println();
    }
}

/* FlyingBird.java provides a FlyingBird class.
 *
 * Completed by: Sarah Whitten
 * Date: April 20, 2019
 ******************************************************/

public class FlyingBird extends Bird 
{
	public FlyingBird()
	{
		super();
	}

	public FlyingBird(String name)
	{
		super(name);
	}

	public String movement()
	{
		return "flew by";
	}
}

/* WalkingBird.java provides a WalkingBird class.
 *
 * Completed by: Sarah Whitten
 * Date: April 20, 2019
 ******************************************************/

public class WalkingBird extends Bird 
{
	public WalkingBird()
	{
		super();
	}

	public WalkingBird(String name)
	{
		super(name);
	}

	public String movement()
	{
		return "walked by";
	}
}

/* Duck.java provides a Duck subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Sarah Whitten
 * Date: April 20, 2019
 ******************************************************/

public class Duck extends FlyingBird 
{
	/* default constructor */
	public Duck() {
		super();
	}
    
	/* explicit constructor
	 * Receive: name, a String 
	 * PostCond: myName == name.
	 */
	public Duck(String name)
	{
		super(name);
	}

	/* A Duck's Call
	 * Return: a duck-call ("Quack!").
	 */
	public String call()
	{
		return "Quack!";
	}
}

/* Goose.java provides a Goose subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Sarah Whitten
 * Date: April 20, 2019
 ******************************************************/

public class Goose extends FlyingBird 
{
	/* default constructor */
	public Goose() 
	{
		super();
	}

	/* explicit constructor
	 * Receive: name, a String 
	 * PostCond: myName == name.
	 */
	public Goose(String name)
	{
		super(name);
	}

	/* A Goose's Call
	 * Return: a goose-call ("Honk!").
	 */
	public String call() 
	{
		return "Honk!";
	}
} 

/* Owl.java provides an Owl subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Sarah Whitten
 * Date: April 20, 2019
 ******************************************************/

public class Owl extends FlyingBird
{
	/* default constructor */
	public Owl()
	{
		super();
	}

	/* explicit constructor
	 * Receive: name, a String 
	 * PostCond: myName == name.
	 */
	public Owl(String name)
	{
		super(name);
	}

	/* An Owl's Call
	 * Return: an owl-call ("Whoo-hoo!").
	 */
	public String call()
	{
		return "Hoo!";
	}
} 

/* Penguin.java provides a Penguin subclass of Bird.
 *
 * By: Sarah Whitten
 * Date: April 20, 2019
 ******************************************************/

public class Penguin extends WalkingBird 
{
	/* default constructor */
	public Penguin() {
		super();
	}
    
	/* explicit constructor
	 * Receive: name, a String 
	 * PostCond: myName == name.
	 */
	public Penguin(String name)
	{
		super(name);
	}

	/* A Penguin's Call
	 * Return: a penguin-call ("Huh-huhh!").
	 */
	public String call()
	{
		return "Huh-huhh!";
	}
}

/* Ostrich.java provides a Ostrich subclass of Bird.
 *
 * By: Sarah Whitten
 * Date: April 20, 2019
 ******************************************************/

public class Ostrich extends WalkingBird 
{
	/* default constructor */
	public Ostrich() {
		super();
	}
    
	/* explicit constructor
	 * Receive: name, a String 
	 * PostCond: myName == name.
	 */
	public Ostrich(String name)
	{
		super(name);
	}

	/* A Ostrich's Call
	 * Return: a ostrich-call ("Snork!").
	 */
	public String call()
	{
		return "Snork!";
	}
}

/* Kiwi.java provides a Kiwi subclass of Bird.
 *
 * By: Sarah Whitten
 * Date: April 20, 2019
 ******************************************************/

public class Kiwi extends WalkingBird 
{
	/* default constructor */
	public Kiwi() {
		super();
	}
    
	/* explicit constructor
	 * Receive: name, a String 
	 * PostCond: myName == name.
	 */
	public Kiwi(String name)
	{
		super(name);
	}

	/* A Kiwi's Call
	 * Return: a kiwi-call ("Reeee!").
	 */
	public String call()
	{
		return "Reeee!";
	}
}

smw42@gold33:~/CS214/projects/10/java$ make Birds
javac -deprecation Birds.java
smw42@gold33:~/CS214/projects/10/java$ java Birds

Welcome to the Bird Park!

Hawkeye FlyingBird just flew by and said Squawk!
Donald Duck just flew by and said Quack!
Mother Goose just flew by and said Honk!
Woodsey Owl just flew by and said Hoo!
Pingu Penguin just walked by and said Huh-huhh!
Orla Ostrich just walked by and said Snork!
Kellie Kiwi just walked by and said Reeee!

smw42@gold33:~/CS214/projects/10/java$ exit

Script done on Sat 20 Apr 2019 07:07:36 PM EDT
Script started on Sat 20 Apr 2019 08:09:12 PM EDT
smw42@gold33:~/CS214/projects/10/ada$ cat bird_package.adb bird_package.ads birds.adb duck_package.adb duck_package.ads flyingbird_package.adb flyin 
gbird_package.ads goose_package.adb goose_package.ads kiwi_package.adb kiwi_package.ads ostrich_package.adb ostrich_package.ads owl_package.adb owl_ 
package.ads penguin_package.adb penguin_package.ads walkingbird_package.adb walkingbird_package.ads
-- bird_package.adb gives Bird-related definitions
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Sarah Whitten
-- Date: April 20, 2019
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Bird_Package is


	----------------------------------------------------
	-- initialization                                  -
	-- Receive: A_Bird, a Bird_Type;                   -
	--          Name, a String                         -
	-- Return: a Bird_Type in which My_Name = Name.    -
	----------------------------------------------------
	procedure Init(A_Bird : out Bird_Type; Name : in String) is
		begin
			A_Bird.My_Name := Name;
		end Init;

	----------------------------------------------------
	-- Name accessor                                   -
	-- Receive: A_Bird, a Bird_Type.                   -
	-- Return: A_Bird.My_Name.                         -
	----------------------------------------------------
	function Name(A_Bird : in Bird_Type) return String is
		begin
			return A_Bird.My_Name;
		end Name;

	----------------------------------------------------
	-- A Bird's Call                                   -
	-- Receive: A_Bird, a Bird_Type.                   -
	-- Return: a default bird-call ("Squawk!").        -
	----------------------------------------------------
	function Call(A_Bird : in Bird_Type) return String is
		begin
			return "Squawk!";
		end Call;

	----------------------------------------------------
	-- Determine type of a Bird (for derived types)    -
	-- Receive: A_Bird, a Bird_Type.                   -
	-- Return: "Bird".                                 -
	----------------------------------------------------
	function Type_Name(A_Bird : in Bird_Type) return String is
		begin
			return "Bird";
		end Type_Name;

	----------------------------------------------------
	-- Output a Bird                                   -
	-- Receive: A_Bird, a Bird or subclass of Bird.    -
	-- Output: Everything known about A_Bird           -
	----------------------------------------------------
	procedure Put(A_Bird : in Bird_Type'Class) is
		begin
			Put( Name(A_Bird) );
			Put( ' ' );
			Put( Type_Name(A_Bird) );
			Put( " just " );
			Put( Movement(A_Bird) );
			Put( " and said " );
			Put( Call(A_Bird) );
		end Put;

end Bird_Package;

-- bird_package.ads gives Bird-related declarations
--
-- Begun by: Dr. Adams, for CS 214 at Calvin College.
-- Completed by: Sarah Whitten
-- Date: April 20, 2019
---------------------------------------------------

package Bird_Package is

	type Bird_Type is abstract tagged private;

	----------------------------------------------------
	-- initialization                                  -
	-- Receive: A_Bird, a Bird_Type;                   -
	--          Name, a String                         -
	-- Return: a Bird_Type whose My_Name = Name.       -
	----------------------------------------------------
	procedure Init(A_Bird : out Bird_Type; Name : in String);

	----------------------------------------------------
	-- Name accessor                                   -
	-- Receive: A_Bird, a Bird_Type.                   -
	-- Return: A_Bird.My_Name.                         -
	----------------------------------------------------
	function Name(A_Bird : in Bird_Type) return String;

	----------------------------------------------------
	-- A Bird's Call                                   -
	-- Receive: A_Bird, a Bird_Type.                   -
	-- Return: a default bird-call ("Squawk!").        -
	----------------------------------------------------
	function Call(A_Bird : in Bird_Type) return String;

	----------------------------------------------------
	-- Determine type of a Bird (for derived types)    -
	-- Receive: A_Bird, a Bird_Type.                   -
	-- Return: "Bird".                                 -
	----------------------------------------------------
	function Type_Name(A_Bird : in Bird_Type) return String;

	----------------------------------------------------
	-- Output a Bird                                   -
	-- Receive: A_Bird, a Bird or subclass of Bird.    -
	-- Output: Everything known about A_Bird           -
	----------------------------------------------------
	procedure Put(A_Bird : in Bird_Type'Class);

	----------------------------------------------------
 	-- Output a Bird                                   -
 	-- Receive: A_Bird, a Bird or subclass of Bird.    -
 	-- Output: How the bird went past                  -
 	----------------------------------------------------
    function Movement(A_Bird : in Bird_Type) return String is abstract;

	private
		type Bird_Type is
			abstract tagged record
				My_Name : String(1..6);
			end record;

end Bird_Package;

-- birds.adb tests our Birds type hierarchy.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College
-- Completed by: Sarah Whitten
-- Date: April 20, 2019
-----------------------------------------------------

with Bird_Package, 
	FlyingBird_Package,
	WalkingBird_Package,
    Duck_Package, 
    Goose_Package, 
    Owl_Package,
    Penguin_Package,
    Ostrich_Package,
    Kiwi_Package,
    Ada.Text_IO;
use Bird_Package,
    FlyingBird_Package,
	WalkingBird_Package,
    Duck_Package, 
    Goose_Package,
    Owl_Package,
    Penguin_Package,
    Ostrich_Package,
    Kiwi_Package,
    Ada.Text_IO;


procedure Birds is

	Bird1 : FlyingBird_Type;       -- base class
	Bird2 : Duck_Type;       -- derived class 1
	Bird3 : Goose_Type;      -- derived class 2
	Bird4 : Owl_Type;        -- derived class 3
	Bird5 : Penguin_Type;
	Bird6 : Ostrich_Type;
	Bird7 : Kiwi_Type;

begin
	New_Line;
   	Put_Line("Welcome to the Bird Park!");
	Init(Bird1, "Tweety");
	Put(Bird1); New_Line;

	Init(Bird2, "Donald");
	Put(Bird2); New_Line;

	Init(Bird3, "Mother");
	Put(Bird3); New_Line;

	Init(Bird4, "Woodsy");
	Put(Bird4); New_Line;

	Init(Bird5, "Prince");
	Put(Bird5); New_Line;

	Init(Bird6, "Olivia");
	Put(Bird6); New_Line;

	Init(Bird7, "Kellie");
	Put(Bird7); New_Line;
	New_Line;

end Birds;

-- duck_package.adb gives Duck-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Sarah Whitten
-- Date: April 20, 2019
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Duck_Package is

	----------------------------------------------------
	-- A Duck's Call (Over-rides Bird.Call())          -
	-- Receive: A_Duck, a Duck_Type.                   -
	-- Return: "Quack!"                                -
	----------------------------------------------------
	function Call(A_Duck : in Duck_Type) return String is
		begin 
			return "Quack!";
		end Call;

	------------------------------------------------------------
	-- Determine type of a Duck (Over-rides Bird.Type_Name()) -
	-- Receive: A_Duck, a Duck_Type.                          -
	-- Return: "Duck".                                        -
	-----------------------------------------------------------
	function Type_Name(A_Duck : in Duck_Type) return String is
		begin
			return "Duck";
		end Type_Name;

end Duck_Package;

-- duck_package.ads gives Duck-related declarations,
--
--  and derives Duck from Bird.
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Sarah Whitten
-- Date: April 20, 2019
---------------------------------------------------

with Bird_Package,
    FlyingBird_Package; 
use Bird_Package,
	FlyingBird_Package;

package Duck_Package is

	type Duck_Type is new Bird_Type with private;

	----------------------------------------------------
	-- A Duck's Call (Over-rides Bird.Call())          -
	-- Receive: A_Duck, a Duck_Type.                   -
	-- Return: "Quack!"                                -
	----------------------------------------------------
	function Call(A_Duck : in Duck_Type) return String;

	------------------------------------------------------------
	-- Determine type of a Duck (Over-rides Bird.Type_Name()) -
	-- Receive: A_Duck, a Duck_Type.                          -
	-- Return: "Duck".                                        -
	-----------------------------------------------------------
	function Type_Name(A_Duck : in Duck_Type) return String;

	private
		type Duck_Type is new FlyingBird_Type with
			record
				null;
			end record;

end Duck_Package;

-- FlyingBird_package.adb gives FlyingBird-related definitions
-- by over-riding Bird-related definitions.
--
-- By: Sarah Whitten
-- Date: April 20, 2019
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body FlyingBird_Package is

 	-----------------------------------------------------------------
 	-- Determine type of a FlyingBird (Over-rides Bird.Type_Name()) -
 	-- Receive: A_FlyingBird, a FlyingBird_Type.                    -
 	-- Return: "FlyingBird".                                        -
 	-----------------------------------------------------------------

	function Type_Name(A_FlyingBird : in FlyingBird_Type) return String is
		begin
	    	return "FlyingBird";
	   	end Type_Name;


	function Movement(A_FlyingBird : in FlyingBird_Type) return String is
	   	begin
	   		return "flew by";
	   	end Movement;

end FlyingBird_Package;

-- FlyingBird_package.ads gives FlyingBird-related declarations,
-- and derives FlyingBird from Bird.
-- 
-- Completed by: Sarah Whitten
-- Date: April 20, 2019
---------------------------------------------------

with Bird_Package; use Bird_Package;

package FlyingBird_Package is

	type FlyingBird_Type is new Bird_Type with private;

	---------------------------------------------------------------
	-- Determine type of FlyingBird (Over-rides Bird.Type_Name()) -
	-- Receive: A_FlyingBird, a FlyingBird_Type.                  -
	-- Return: "FlyingBird".                                      -
	---------------------------------------------------------------
	function  Type_Name(A_FlyingBird : in FlyingBird_Type) return String;

	----------------------------------------------------
	-- Determine motion of FlyingBird                  -
	-- Receive: A_FlyingBird, a FlyingBird_Type.       -
	-- Return: "flew by".                              -
	----------------------------------------------------
 	function Movement(A_FlyingBird : in FlyingBird_Type) return String;

private

	type FlyingBird_Type is new Bird_Type with
        record
            null;
        end record;

end FlyingBird_Package;

-- goose_package.adb gives Goose-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Sarah Whitten
-- Date: April 20, 2019
---------------------------------------------------

package body Goose_Package is

	----------------------------------------------------
	-- A Goose's Call (Over-rides Bird.Call())         -
	-- Receive: A_Goose, a Goose_Type.                 -
	-- Return: "Honk!"                                 -
	----------------------------------------------------
	function Call(A_Goose : in Goose_Type) return String is
		begin
			return "Honk!";
		end Call;

	-----------------------------------------------------
	-- Determine type of a Goose                        -
	-- (Over-rides Bird.Type_Name())                    -
	-- Receive: A_Goose, a Goose_Type.                  -
	-- Return: "Goose".                                 -
	-----------------------------------------------------
	function Type_Name(A_Goose : in Goose_Type) return String is
		begin
			return "Goose";
		end Type_Name;

end Goose_Package;

-- goose_package.ads gives Goose-related declarations,
--
--  and derives Goose from Bird.
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Sarah Whitten
-- Date: April 20, 2019
---------------------------------------------------

with Bird_Package,
    FlyingBird_Package; 
use Bird_Package,
	FlyingBird_Package;

package Goose_Package is

	type Goose_Type is new Bird_Type with private;

	----------------------------------------------------
	-- A Goose's Call (Over-rides Bird.Call())         -
	-- Receive: A_Goose, a Goose.                      -
	-- Return: "Honk!"                                 -
	----------------------------------------------------
	function Call(A_Goose : in Goose_Type) return String;

	-----------------------------------------------------
	-- Determine type of a Goose                        -
	-- (Over-rides Bird.Type_Name())                    -
	-- Receive: A_Goose, a Goose.                       -
	-- Return: "Goose".                                 -
	-----------------------------------------------------
	function Type_Name(A_Goose : in Goose_Type) return String;

	private
		type Goose_Type is new FlyingBird_Type with
			record
				null;
			end record;

end Goose_Package;

-- kiwi_package.adb gives Kiwi-related definitions
--  by over-riding Bird-related definitions.
--
-- By: Sarah Whitten
-- Date: April 20, 2019
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Kiwi_Package is

	----------------------------------------------------
	-- A Kiwi's Call (Over-rides Bird.Call())       -
	-- Receive: A_Kiwi, a Kiwi_Type.             -
	-- Return: "Reeee!"                             -
	----------------------------------------------------
	function Call(A_Kiwi : in Kiwi_Type) return String is
		begin
			return "Reeee!";
		end Call;

	-----------------------------------------------------
	-- Determine type of a Kiwi                      -
	-- (Over-rides Bird.Type_Name())                    -
	-- Receive: A_Kiwi, a Kiwi_Type.              -
	-- Return: "Kiwi".                               -
	-----------------------------------------------------
	function Type_Name(A_Kiwi : in Kiwi_Type) return String is
		begin
			return "Kiwi";
		end Type_Name;

end Kiwi_Package;

-- kiwi_package.ads gives Kiwi-related declarations,
--  and derives Kiwi from Bird.
--
-- By: Sarah Whitten
-- Date: April 20, 2019
---------------------------------------------------

with Bird_Package,
	WalkingBird_Package; 
use Bird_Package,
	WalkingBird_Package;

package Kiwi_Package is

	type Kiwi_Type is new Bird_Type with private;

	-------------------------------------------------
	-- A Kiwi's Call (Over-rides Bird.Call())       -
	-- Receive: A_Kiwi, a Kiwi_Type.                -
	-- Return: "Reeee!"                             -
	-------------------------------------------------
	function Call(A_Kiwi : in Kiwi_Type) return String;

	--------------------------------------------------
	-- Determine type of a Kiwi                      -
	-- (Over-rides Bird.Type_Name())                 -
	-- Receive: A_Kiwi, a Kiwi_Type.                 -
	-- Return: "Kiwi".                               -
	--------------------------------------------------
	function Type_Name(A_Kiwi : in Kiwi_Type) return String;

	private
		type Kiwi_Type is new WalkingBird_Type with
			record
				null;
			end record;

end Kiwi_Package;

-- ostrich_package.adb gives Ostrich-related definitions
--  by over-riding Bird-related definitions.
--
-- By: Sarah Whitten
-- Date: April 20, 2019
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Ostrich_Package is

	----------------------------------------------------
	-- A Ostrich's Call (Over-rides Bird.Call())       -
	-- Receive: An_Ostrich, a Ostrich_Type.             -
	-- Return: "Snork!"                             -
	----------------------------------------------------
	function Call(An_Ostrich : in Ostrich_Type) return String is
		begin
			return "Snork!";
		end Call;

	-----------------------------------------------------
	-- Determine type of a Ostrich                      -
	-- (Over-rides Bird.Type_Name())                    -
	-- Receive: An_Ostrich, an Ostrich_Type.              -
	-- Return: "Ostrich".                               -
	-----------------------------------------------------
	function Type_Name(An_Ostrich : in Ostrich_Type) return String is
		begin
			return "Ostrich";
		end Type_Name;

end Ostrich_Package;

-- ostrich_package.ads gives Ostrich-related declarations,
--  and derives Ostrich from Bird.
--
-- By: Sarah Whitten
-- Date: April 20, 2019
---------------------------------------------------

with Bird_Package,
	WalkingBird_Package; 
use Bird_Package,
	WalkingBird_Package;

package Ostrich_Package is

	type Ostrich_Type is new Bird_Type with private;

	----------------------------------------------------
	-- A Ostrich's Call (Over-rides Bird.Call())       -
	-- Receive: An_Ostrich, an Ostrich_Type.             -
	-- Return: "Snork!"                             -
	----------------------------------------------------
	function Call(An_Ostrich : in Ostrich_Type) return String;

	-----------------------------------------------------
	-- Determine type of a Ostrich                      -
	-- (Over-rides Bird.Type_Name())                    -
	-- Receive: An_Ostrich, a Ostrich_Type.              -
	-- Return: "Ostrich".                               -
	-----------------------------------------------------
	function Type_Name(An_Ostrich : in Ostrich_Type) return String;

	private
		type Ostrich_Type is new WalkingBird_Type with
			record
				null;
			end record;

end Ostrich_Package;

-- owl_package.adb gives Owl-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Sarah Whitten
-- Date: April 20, 2019
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Owl_Package is

	----------------------------------------------------
	-- A Owl's Call (Over-rides Bird.Call())           -
	-- Receive: An_Owl, an Owl_Type.                   -
	-- Return: "Whoo!"                                 -
	----------------------------------------------------
	function Call(An_Owl : in Owl_Type) return String is
		begin
			return "Hoo!";
		end Call;

	-----------------------------------------------------
	-- Determine type of a Owl                          -
	-- (Over-rides Bird.Type_Name())                    -
	-- Receive: An_Owl, an Owl_Type.                    -
	-- Return: "Owl".                                   -
	-----------------------------------------------------
	function Type_Name(An_Owl : in Owl_Type) return String is
		begin
			return "Owl";
		end Type_Name;

end Owl_Package;

-- owl_package.ads gives Owl-related declarations,
--  and derives Owl from Bird.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Sarah Whitten
-- Date: April 20, 2019
---------------------------------------------------

with Bird_Package,
	FlyingBird_Package; 
use Bird_Package,
	FlyingBird_Package;

package Owl_Package is

	type Owl_Type is new Bird_Type with private;

	----------------------------------------------------
	-- A Owl's Call (Over-rides Bird.Call())           -
	-- Receive: An_Owl, an Owl_Type.                   -
	-- Return: "Whoo!"                                 -
	----------------------------------------------------
	function Call(An_Owl : in Owl_Type) return String;

	-----------------------------------------------------
	-- Determine type of a Owl                          -
	-- (Over-rides Bird.Type_Name())                    -
	-- Receive: An_Owl, an Owl_Type.                    -
	-- Return: "Owl".                                   -
	-----------------------------------------------------
	function Type_Name(An_Owl : in Owl_Type) return String;

	private
		type Owl_Type is new FlyingBird_Type with
			record
				null;
			end record;

end Owl_Package;

-- penguin_package.adb gives Penguin-related definitions
--  by over-riding Bird-related definitions.
--
-- By: Sarah Whitten
-- Date: April 20, 2019
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Penguin_Package is

	----------------------------------------------------
	-- A Penguin's Call (Over-rides Bird.Call())       -
	-- Receive: A_Penguin, a Penguin_Type.             -
	-- Return: "Huh-huhh!"                             -
	----------------------------------------------------
	function Call(A_Penguin : in Penguin_Type) return String is
		begin
			return "Huh-huhh!";
		end Call;

	-----------------------------------------------------
	-- Determine type of a Penguin                      -
	-- (Over-rides Bird.Type_Name())                    -
	-- Receive: A_Penguin, a Penguin_Type.              -
	-- Return: "Penguin".                               -
	-----------------------------------------------------
	function Type_Name(A_Penguin : in Penguin_Type) return String is
		begin
			return "Penguin";
		end Type_Name;

end Penguin_Package;

-- penguin_package.ads gives Penguin-related declarations,
--  and derives Penguin from Bird.
--
-- By: Sarah Whitten
-- Date: April 20, 2019
---------------------------------------------------

with Bird_Package,
	WalkingBird_Package; 
use Bird_Package,
	WalkingBird_Package;

package Penguin_Package is

	type Penguin_Type is new Bird_Type with private;

	----------------------------------------------------
	-- A Penguin's Call (Over-rides Bird.Call())       -
	-- Receive: A_Penguin, a Penguin_Type.             -
	-- Return: "Huh-huhh!"                             -
	----------------------------------------------------
	function Call(A_Penguin : in Penguin_Type) return String;

	-----------------------------------------------------
	-- Determine type of a Penguin                      -
	-- (Over-rides Bird.Type_Name())                    -
	-- Receive: A_Penguin, a Penguin_Type.              -
	-- Return: "Penguin".                               -
	-----------------------------------------------------
	function Type_Name(A_Penguin : in Penguin_Type) return String;

	private
		type Penguin_Type is new WalkingBird_Type with
			record
				null;
			end record;

end Penguin_Package;

-- WalkingBird_package.adb gives WalkingBird-related definitions
-- by over-riding Bird-related definitions.
--
-- By: Sarah Whitten
-- Date: April 20, 2019
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body WalkingBird_Package is

	-----------------------------------------------------------------
	-- Determine type of a WalkingBird (Over-rides Bird.Type_Name())-
	-- Receive: A_WalkingBird, a WalkingBird_Type.                    -
	-- Return: "FlyingBird".                                        -
	-----------------------------------------------------------------

 	function Type_Name(A_WalkingBird : in WalkingBird_Type) return String is
   		begin
    		return "WalkingBird";
   		end Type_Name;


   	function Movement(A_WalkingBird : in WalkingBird_Type) return String is
   		begin
   			return "walked by";
   		end Movement;

end WalkingBird_Package;

-- WalkingBird_package.ads gives WalkingBird-related declarations,
-- and derives WalkingBird from Bird.
-- 
-- Completed by: Sarah Whitten
-- Date: April 20, 2019
---------------------------------------------------

with Bird_Package; use Bird_Package;

package WalkingBird_Package is

	type WalkingBird_Type is new Bird_Type with private;

	---------------------------------------------------------------
	-- Determine type of WalkingBird (Over-rides Bird.Type_Name())-
	-- Receive: A_WalkingBird, a WalkingBird_Type.                -
	-- Return: "WalkingBird".                                     -
	---------------------------------------------------------------
	function  Type_Name(A_WalkingBird : in WalkingBird_Type) return String;

	----------------------------------------------------
	-- Determine motion of WalkingBird                 -
	-- Receive: A_WalkingBird, a WalkingBird_Type.     -
	-- Return: "walked by".                            -
	----------------------------------------------------
 	function Movement(A_WalkingBird : in WalkingBird_Type) return String;

private

	type WalkingBird_Type is new Bird_Type with
        record
            null;
        end record;

end WalkingBird_Package;

smw42@gold33:~/CS214/projects/10/ada$ gnatmake birds
gcc-5 -c birds.adb
gcc-5 -c bird_package.adb
gcc-5 -c duck_package.adb
gcc-5 -c flyingbird_package.adb
gcc-5 -c goose_package.adb
gcc-5 -c kiwi_package.adb
gcc-5 -c ostrich_package.adb
gcc-5 -c owl_package.adb
gcc-5 -c penguin_package.adb
gcc-5 -c walkingbird_package.adb
gnatbind-5 -x birds.ali
gnatlink-5 birds.ali
smw42@gold33:~/CS214/projects/10/ada$ ./birds

Welcome to the Bird Park!
Tweety FlyingBird just flew by and said Squawk!
Donald Duck just flew by and said Quack!
Mother Goose just flew by and said Honk!
Woodsy Owl just flew by and said Hoo!
Prince Penguin just walked by and said Huh-huhh!
Olivia Ostrich just walked by and said Snork!
Kellie Kiwi just walked by and said Reeee!

smw42@gold33:~/CS214/projects/10/ada$ exit

Script done on Sat 20 Apr 2019 08:12:15 PM EDT
Script started on Tue Apr 23 22:33:09 2019
bash-3.2$ cd src
bash-3.2$ cat Bird.clj Duck.clj FlyingBird.clj Goose.clj Kiwi.clj Ostrich.clj Owl.clj Penguin.clj WalkingBird.clj birds.clj
;;;; Bird.clj provides a Bird "class".
;;;; 
;;;; Begun by: Prof. Adams, for CS 214 at Calvin College.
;;;; Completed by: Sarah Whitten
;;;; Date: April 23, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define a Bird 'class' with one attribute, the Bird's name.
(defrecord Bird [name])

;;; Bird constructors
;;; - default: no args
;;;   Postcondition: name == a default value.
;;; - explicit:
;;;   Receive: itsName, a String.
;;;   Postcondition: name == itsName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn make-Bird
		([]        (->Bird "Ann Onymous"))
		([itsName] (->Bird itsName))
)

;;; accessor method for name attribute
;;; Receive: this, a Bird object.
;;; Return: this's name.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn getName [^Bird this]
  (:name this)
)

(defmulti getClass class)
(defmulti getCall  class)
(defmulti toString class)
(defmulti getMovement class)

;;; method to retrieve a Bird's class
;;; Receive: this, a Bird object.
;;; Return: "Bird".
;;; Note: 'subclasses' of Bird must define this method.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod getClass Bird [ _ ]
  "Bird"
)


;;; method to retrieve a Bird's call
;;; Receive: this, a Bird object.
;;; Return: a default bird-call.
;;; Note: 'subclasses' of Bird must define this method.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod getCall :default [ _ ]
  "Squawk!"
)

(defmethod getMovement :default [ _ ]
		"went by"
)

;;; method to combine a Bird, its class and its call into a String.
;;; Receive: this, a Bird object.
;;; Return: a String representing this, its class, and its call.
;;; Note: getClass and getCall are polymorphic methods.
;;; Note also: the use of :default for its class means that
;;;        'subclasses' may but are not required to define it.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod toString :default [aBird]
  (str (getName aBird) " " (getClass aBird) " just " 
  		(getMovement aBird) " and said " (getCall aBird))
)

;;;; Duck.clj provides a Duck "class".
;;;; 
;;;; Begun by: Prof. Adams, for CS 214 at Calvin College.
;;;; Completed by: Sarah Whitten
;;;; Date: April 23, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; bring in 'Bird' (to be used as superclass) 
(load "FlyingBird")

;; define 'Duck' as 'subclass' of FlyingBird
(defrecord Duck [^FlyingBird name] )

;;; constructors
;;; - default: takes no arguments
;;;   Postcondition: name is initialized to a default value
;;; - explicit: takes one parameter
;;;   Receive: itsName, a String
;;;   Postcondition: name == itsName
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn make-Duck
  ([]                (->Duck "Ann Onymous"))
  ([^String itsName] (->Duck itsName))
)

;;; method to retrieve a Duck's class
;;; Receive: this, a Duck object.
;;; Return: "Duck"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmethod getClass Duck [ _ ]
  "Duck"
)

;;; method to retrieve a Duck's call
;;; Receive: this, a Duck object.
;;; Return: "Quack!"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmethod getCall Duck [ _ ]
  "Quack!"
)

;;;; FlyingBird.clj provides a FlyingBird "class".
;;;; 
;;;; By: Sarah Whitten
;;;; Date: April 23, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; bring in 'Bird' (to be used as superclass) 
(load "Bird")

;; Define FlyingBird as a subclass of Bird
(defrecord FlyingBird [^Bird name])

(defn make-FlyingBird
		([]                (->FlyingBird "Ann Onymous"))
		([^String itsName] (->FlyingBird itsName))
)

(defmethod getClass FlyingBird [ _ ]
  "FlyingBird"
)

(defmethod getMovement FlyingBird [ _ ]
		"flew by"
)

;;;; Goose.clj provides a Goose "class".
;;;; 
;;;; Begun by: Prof. Adams, for CS 214 at Calvin College.
;;;; Completed by: Sarah Whitten
;;;; Date: April 23, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; bring in 'Bird' (to be used as 'superclass')
(load "FlyingBird")

(defrecord Goose [^FlyingBird name] )

;;; Goose constructors
;;; - default: no args
;;;   Postcondition: name == a default value. 
;;; - explicit1:
;;;   Receive: itsName, a String
;;;   Postcondition: name == itsName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn make-Goose
  ([]                (->Goose "Ann Onymous"))
  ([^String itsName] (->Goose itsName))
)

;;; method to retrieve a Goose's class
;;; Receive: this, a Goose object.
;;; Return: "Goose".
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod getClass Goose [ _ ]
  "Goose"
)

;;; method to retrieve a Goose's call
;;; Receive: this, a Goose object.
;;; Return: "Honk!"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod getCall Goose [ _ ]
  "Honk!"
)

;;;; Kiwi.clj provides a Kiwi "class".
;;;; 
;;;; By: Sarah Whitten
;;;; Date: April 23, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; bring in 'WalkingBird' (to be used as superclass) 
(load "WalkingBird")

;; define 'Kiwi' as 'subclass' of WalkingBird
(defrecord Kiwi [^WalkingBird name] )

;;; constructors
;;; - default: takes no arguments
;;;   Postcondition: name is initialized to a default value
;;; - explicit: takes one parameter
;;;   Receive: itsName, a String
;;;   Postcondition: name == itsName
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn make-Kiwi
  ([]                (->Kiwi "Ann Onymous"))
  ([^String itsName] (->Kiwi itsName))
)

;;; method to retrieve a Kiwi's class
;;; Receive: this, a Kiwi object.
;;; Return: "Kiwi"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmethod getClass Kiwi [ _ ]
  "Kiwi"
)

;;; method to retrieve a Kiwi's call
;;; Receive: this, a Kiwi object.
;;; Return: "Quack!"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmethod getCall Kiwi [ _ ]
  "Reeee!"
)

;;;; Ostrich.clj provides a Ostrich "class".
;;;; 
;;;; By: Sarah Whitten
;;;; Date: April 23, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; bring in 'WalkingBird' (to be used as superclass) 
(load "WalkingBird")

;; define 'Ostrich' as 'subclass' of WalkingBird
(defrecord Ostrich [^WalkingBird name] )

;;; constructors
;;; - default: takes no arguments
;;;   Postcondition: name is initialized to a default value
;;; - explicit: takes one parameter
;;;   Receive: itsName, a String
;;;   Postcondition: name == itsName
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn make-Ostrich
  ([]                (->Ostrich "Ann Onymous"))
  ([^String itsName] (->Ostrich itsName))
)

;;; method to retrieve a Ostrich's class
;;; Receive: this, a Ostrich object.
;;; Return: "Ostrich"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmethod getClass Ostrich [ _ ]
  "Ostrich"
)

;;; method to retrieve a Ostrich's call
;;; Receive: this, a Ostrich object.
;;; Return: "Snork!"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmethod getCall Ostrich [ _ ]
  "Snork!"
)

;;;; Owl.clj provides an Owl "class".
;;;; 
;;;; Begun by: Prof. Adams, for CS 214 at Calvin College.
;;;; Completed by: Sarah Whitten
;;;; Date: April 23, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(load "FlyingBird")

(defrecord Owl [^FlyingBird name] )

(defn make-Owl
  ([]                (->Owl "Ann Onymous"))
  ([^String itsName] (->Owl itsName))
)

(defmethod getClass Owl [ _ ]
		"Owl"
)

(defmethod getCall Owl [ _ ]
		"Hoo!"
)

;;;; Penguin.clj provides a Penguin "class".
;;;; 
;;;; By: Sarah Whitten
;;;; Date: April 23, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; bring in 'WalkingBird' (to be used as superclass) 
(load "WalkingBird")

;; define 'Penguin' as 'subclass' of WalkingBird
(defrecord Penguin [^WalkingBird name] )

;;; constructors
;;; - default: takes no arguments
;;;   Postcondition: name is initialized to a default value
;;; - explicit: takes one parameter
;;;   Receive: itsName, a String
;;;   Postcondition: name == itsName
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn make-Penguin
  ([]                (->Penguin "Ann Onymous"))
  ([^String itsName] (->Penguin itsName))
)

;;; method to retrieve a Penguin's class
;;; Receive: this, a Penguin object.
;;; Return: "Penguin"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmethod getClass Penguin [ _ ]
  "Penguin"
)

;;; method to retrieve a Penguin's call
;;; Receive: this, a Penguin object.
;;; Return: "Huh-huhh!"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmethod getCall Penguin [ _ ]
  "Huh-huhh!"
)

;;;; WalkingBird.clj provides a WalkingBird "class".
;;;; 
;;;; By: Sarah Whitten
;;;; Date: April 23, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; bring in 'Bird' (to be used as superclass) 
(load "Bird")

;; Define WalkingBird as a subclass of Bird
(defrecord WalkingBird [^Bird name])

(defn make-WalkingBird
		([]                (->WalkingBird "Ann Onymous"))
		([^String itsName] (->WalkingBird itsName))
)

(defmethod getClass WalkingBird [ _ ]
  "WalkingBird"
)

(defmethod getMovement WalkingBird [ _ ]
		"walked by"
)

;; birds.clj illustrates inheritance and polymorphism in Clojure.
;;
;; Output: the results of testing the Bird functions.
;;
;; Usage: clojure -m birds
;;
;; Begun by: Prof. Adams, for CS 214 Lab 10 at Calvin College.
;; Completed by: Sarah Whitten
;; Date: April 23, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns birds
  (:require
      [Bird]
     	[FlyingBird]
     	[WalkingBird]
     	[Duck]
     	[Goose]
     	[Owl]
     	[Penguin]
     	[Ostrich]
     	[Kiwi]
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Function -main tests the classes in the Bird hierarchy.
;;; Output: the results of testing the Bird functions.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [                                ;; Birds
     bird0 (make-Bird)              ; default Bird constructor
     bird1 (make-Bird "Hawkeye")    ; explicit Bird constructor
                                     ;; Ducks
     bird2 (make-Duck)              ; default Duck constructor
     bird3 (make-Duck  "Donald")    ; explicit Duck constructor
                                     ;; Geese
     bird4 (make-Goose)             ; default Goose constructor
     bird5 (make-Goose "Mother")    ; explicit Goose constructor
                                     ;; Owls
     bird6 (make-Owl)               ; default Owl constructor
     bird7 (make-Owl "Woodsey")     ; explicit Owl constructor
     																 ;; Penguins
     bird10 (make-Penguin)					; default Penguin constructor
     bird11 (make-Penguin "Pingu")  ; explicit Penguin constructor
     																 ;; Ostriches
     bird12 (make-Ostrich)					; default Ostrich constructor
     bird13 (make-Ostrich "Orla")   ; explicit Ostrich constructor
     																 ;; Kiwis
     bird14 (make-Kiwi) 						; default Kiwi constructor
     bird15 (make-Kiwi "Kellie")    ; explicit Kiwi constructor
    ]

    (println "\nWelcome to the Bird Park!\n")
   	(println (toString bird0))
   	(println (toString bird1))
    (println)
   	(println (toString bird2))
   	(println (toString bird3))
    (println)
   	(println (toString bird4))
   	(println (toString bird5))
    (println)
   	(println (toString bird6))
  	 (println (toString bird7))
    (println)
    (println (toString bird10))
   	(println (toString bird11))
    (println)
   	(println (toString bird12))
  	 (println (toString bird13))
    (println)
   	(println (toString bird14))
  	 (println (toString bird15))
    (println)
    (println "Goodbye, and come again!\n")
  )
)
 
bash-3.2$ cd ..
bash-3.2$ clojure -m birds

Welcome to the Bird Park!

Ann Onymous Bird just went by and said Squawk!
Hawkeye Bird just went by and said Squawk!

Ann Onymous Duck just flew by and said Quack!
Donald Duck just flew by and said Quack!

Ann Onymous Goose just went by and said Honk!
Mother Goose just flew by and said Honk!

Ann Onymous Owl just flew by and said Hoo!
Woodsey Owl just flew by and said Hoo!

Ann Onymous Penguin just walked by and said Huh-huhh!
Pingu Penguin just walked by and said Huh-huhh!

Ann Onymous Ostrich just walked by and said Snork!
Orla Ostrich just walked by and said Snork!

Ann Onymous Kiwi just walked by and said Reeee!
Kellie Kiwi just walked by and said Reeee!

Goodbye, and come again!

bash-3.2$ exit

Script done on Tue Apr 23 22:35:14 2019
Script started on Sat 20 Apr 2019 08:32:47 PM EDT
smw42@gold33:~/CS214/projects/10/ruby$ cat Bird.rb birds.rb Duck.rb FlyingBird.rb Goose.rb Kiwi.rb Ostrich.rb Owl.rb Penguin.rb WalkingBird.rb
# Bird.rb | Defines a Bird superclass 
#   to be extended by specific bird sub-classes.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Sarah Whitten
# Date: April 20, 2019
####################################################

class Bird

  	attr_reader :name

  	def initialize(name)
    	@name = name
  	end

  	def call
    	'Squawk!'
	end

	def className
		self.class.to_s
	end

	def movement
		'went by'
	end

	def print
	    puts name + " " + className + " just " + movement + " and said " + call
	end

end

# birds.rb | Tests out the menagerie of bird classes.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Sarah Whitten
# Date: April 20, 2019
######################################################

require './Bird.rb'
require './FlyingBird.rb'
require './WalkingBird.rb'
require './Duck.rb'
require './Goose.rb'
require './Owl.rb'
require './Penguin.rb'
require './Ostrich.rb'
require './Kiwi.rb'

puts "\nWelcome to the Bird Park!\n\n"

bird0 = Bird.new "Hawkeye"
bird0.print

bird1 = Duck.new "Donald"
bird1.print

bird2 = Goose.new "Mother"
bird2.print

bird3 = Owl.new "Woodsey"
bird3.print

bird4 = Penguin.new "Pingu"
bird4.print

bird5 = Ostrich.new "Orla"
bird5.print

bird6 = Kiwi.new "Kellie"
bird6.print

puts "\n"

# Duck.rb | Defines the Duck class which inherits attributes 
# and methods from the FlyingBird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Sarah Whitten
# Date: April 20, 2019
####################################################

require './FlyingBird.rb'
require './Bird.rb'

class Duck < FlyingBird

	def call
    	'Quack!'
	end

end

# FlyingBird.rb | Defines a FlyingBird subclass 
# to be extended by specific flying-bird sub-classes.
#
# By: Sarah Whitten
# Date: April 20, 2019
####################################################

class FlyingBird < Bird

	def movement
		'flew by'
	end

end

# Goose.rb | Defines the Goose class which inherits attributes and methods
#   from the FlyingBird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Sarah Whitten
# Date: April 20, 2019
####################################################

require './Bird.rb'
require './FlyingBird'

class Goose < FlyingBird

	def call
    	'Honk!'
	end

end

# Kiwi.rb | Defines the Kiwi class which inherits attributes 
# and methods from the WalkingBird superclass.
#
# By: Sarah Whitten
# Date: April 20, 2019
####################################################

require './WalkingBird.rb'
require './Bird.rb'

class Kiwi < WalkingBird

	def call
    	'Reeee!'
	end

end

# Ostrich.rb | Defines the Ostrich class which inherits attributes 
# and methods from the WalkingBird superclass.
#
# By: Sarah Whitten
# Date: April 20, 2019
####################################################

require './WalkingBird.rb'
require './Bird.rb'

class Ostrich < WalkingBird

	def call
    	'Snork!'
	end

end

# Owl.rb | Defines the Owl class which inherits attributes and methods
#   from the FlyingBird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Sarah Whitten
# Date: April 20, 2019
####################################################

require './Bird.rb'
require './FlyingBird'

class Owl < FlyingBird

	def call
    	'Hoo!'
	end

end

# Penguin.rb | Defines the Penguin class which inherits attributes 
# and methods from the WalkingBird superclass.
#
# By: Sarah Whitten
# Date: April 20, 2019
####################################################

require './WalkingBird.rb'
require './Bird.rb'

class Penguin < WalkingBird

	def call
    	'Huh-huhh!'
	end

end

# WalkingBird.rb | Defines a WalkingBird subclass 
# to be extended by specific walking-bird sub-classes.
#
# By: Sarah Whitten
# Date: April 20, 2019
####################################################

class WalkingBird < Bird

	def movement
		'walked by'
	end

end

smw42@gold33:~/CS214/projects/10/ruby$ ruby birds.rb

Welcome to the Bird Park!

Hawkeye Bird just went by and said Squawk!
Donald Duck just flew by and said Quack!
Mother Goose just flew by and said Honk!
Woodsey Owl just flew by and said Hoo!
Pingu Penguin just walked by and said Huh-huhh!
Orla Ostrich just walked by and said Snork!
Kellie Kiwi just walked by and said Reeee!

smw42@gold33:~/CS214/projects/10/ruby$ exit

Script done on Sat 20 Apr 2019 08:33:27 PM EDT
