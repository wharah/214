Script started on Tue Apr 23 22:33:09 2019
bash-3.2$ cd src
bash-3.2$ cat Bird.clj Duck.clj FlyingBird.clj Goose.clj Kiwi.clj Ostrich.clj Owl.clj Penguin.clj WalkingBird.clj birds.clj
;;;; Bird.clj provides a Bird "class".
;;;; 
;;;; Begun by: Prof. Adams, for CS 214 at Calvin College.
;;;; Completed by: Sarah Whitten
;;;; Date: April 23, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define a Bird 'class' with one attribute, the Bird's name.
(defrecord Bird [name])

;;; Bird constructors
;;; - default: no args
;;;   Postcondition: name == a default value.
;;; - explicit:
;;;   Receive: itsName, a String.
;;;   Postcondition: name == itsName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn make-Bird
		([]        (->Bird "Ann Onymous"))
		([itsName] (->Bird itsName))
)

;;; accessor method for name attribute
;;; Receive: this, a Bird object.
;;; Return: this's name.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn getName [^Bird this]
  (:name this)
)

(defmulti getClass class)
(defmulti getCall  class)
(defmulti toString class)
(defmulti getMovement class)

;;; method to retrieve a Bird's class
;;; Receive: this, a Bird object.
;;; Return: "Bird".
;;; Note: 'subclasses' of Bird must define this method.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod getClass Bird [ _ ]
  "Bird"
)


;;; method to retrieve a Bird's call
;;; Receive: this, a Bird object.
;;; Return: a default bird-call.
;;; Note: 'subclasses' of Bird must define this method.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod getCall :default [ _ ]
  "Squawk!"
)

(defmethod getMovement :default [ _ ]
		"went by"
)

;;; method to combine a Bird, its class and its call into a String.
;;; Receive: this, a Bird object.
;;; Return: a String representing this, its class, and its call.
;;; Note: getClass and getCall are polymorphic methods.
;;; Note also: the use of :default for its class means that
;;;        'subclasses' may but are not required to define it.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod toString :default [aBird]
  (str (getName aBird) " " (getClass aBird) " just " 
  		(getMovement aBird) " and said " (getCall aBird))
)

;;;; Duck.clj provides a Duck "class".
;;;; 
;;;; Begun by: Prof. Adams, for CS 214 at Calvin College.
;;;; Completed by: Sarah Whitten
;;;; Date: April 23, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; bring in 'Bird' (to be used as superclass) 
(load "FlyingBird")

;; define 'Duck' as 'subclass' of FlyingBird
(defrecord Duck [^FlyingBird name] )

;;; constructors
;;; - default: takes no arguments
;;;   Postcondition: name is initialized to a default value
;;; - explicit: takes one parameter
;;;   Receive: itsName, a String
;;;   Postcondition: name == itsName
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn make-Duck
  ([]                (->Duck "Ann Onymous"))
  ([^String itsName] (->Duck itsName))
)

;;; method to retrieve a Duck's class
;;; Receive: this, a Duck object.
;;; Return: "Duck"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmethod getClass Duck [ _ ]
  "Duck"
)

;;; method to retrieve a Duck's call
;;; Receive: this, a Duck object.
;;; Return: "Quack!"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmethod getCall Duck [ _ ]
  "Quack!"
)

;;;; FlyingBird.clj provides a FlyingBird "class".
;;;; 
;;;; By: Sarah Whitten
;;;; Date: April 23, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; bring in 'Bird' (to be used as superclass) 
(load "Bird")

;; Define FlyingBird as a subclass of Bird
(defrecord FlyingBird [^Bird name])

(defn make-FlyingBird
		([]                (->FlyingBird "Ann Onymous"))
		([^String itsName] (->FlyingBird itsName))
)

(defmethod getClass FlyingBird [ _ ]
  "FlyingBird"
)

(defmethod getMovement FlyingBird [ _ ]
		"flew by"
)

;;;; Goose.clj provides a Goose "class".
;;;; 
;;;; Begun by: Prof. Adams, for CS 214 at Calvin College.
;;;; Completed by: Sarah Whitten
;;;; Date: April 23, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; bring in 'Bird' (to be used as 'superclass')
(load "FlyingBird")

(defrecord Goose [^FlyingBird name] )

;;; Goose constructors
;;; - default: no args
;;;   Postcondition: name == a default value. 
;;; - explicit1:
;;;   Receive: itsName, a String
;;;   Postcondition: name == itsName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn make-Goose
  ([]                (->Goose "Ann Onymous"))
  ([^String itsName] (->Goose itsName))
)

;;; method to retrieve a Goose's class
;;; Receive: this, a Goose object.
;;; Return: "Goose".
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod getClass Goose [ _ ]
  "Goose"
)

;;; method to retrieve a Goose's call
;;; Receive: this, a Goose object.
;;; Return: "Honk!"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod getCall Goose [ _ ]
  "Honk!"
)

;;;; Kiwi.clj provides a Kiwi "class".
;;;; 
;;;; By: Sarah Whitten
;;;; Date: April 23, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; bring in 'WalkingBird' (to be used as superclass) 
(load "WalkingBird")

;; define 'Kiwi' as 'subclass' of WalkingBird
(defrecord Kiwi [^WalkingBird name] )

;;; constructors
;;; - default: takes no arguments
;;;   Postcondition: name is initialized to a default value
;;; - explicit: takes one parameter
;;;   Receive: itsName, a String
;;;   Postcondition: name == itsName
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn make-Kiwi
  ([]                (->Kiwi "Ann Onymous"))
  ([^String itsName] (->Kiwi itsName))
)

;;; method to retrieve a Kiwi's class
;;; Receive: this, a Kiwi object.
;;; Return: "Kiwi"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmethod getClass Kiwi [ _ ]
  "Kiwi"
)

;;; method to retrieve a Kiwi's call
;;; Receive: this, a Kiwi object.
;;; Return: "Quack!"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmethod getCall Kiwi [ _ ]
  "Reeee!"
)

;;;; Ostrich.clj provides a Ostrich "class".
;;;; 
;;;; By: Sarah Whitten
;;;; Date: April 23, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; bring in 'WalkingBird' (to be used as superclass) 
(load "WalkingBird")

;; define 'Ostrich' as 'subclass' of WalkingBird
(defrecord Ostrich [^WalkingBird name] )

;;; constructors
;;; - default: takes no arguments
;;;   Postcondition: name is initialized to a default value
;;; - explicit: takes one parameter
;;;   Receive: itsName, a String
;;;   Postcondition: name == itsName
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn make-Ostrich
  ([]                (->Ostrich "Ann Onymous"))
  ([^String itsName] (->Ostrich itsName))
)

;;; method to retrieve a Ostrich's class
;;; Receive: this, a Ostrich object.
;;; Return: "Ostrich"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmethod getClass Ostrich [ _ ]
  "Ostrich"
)

;;; method to retrieve a Ostrich's call
;;; Receive: this, a Ostrich object.
;;; Return: "Snork!"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmethod getCall Ostrich [ _ ]
  "Snork!"
)

;;;; Owl.clj provides an Owl "class".
;;;; 
;;;; Begun by: Prof. Adams, for CS 214 at Calvin College.
;;;; Completed by: Sarah Whitten
;;;; Date: April 23, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(load "FlyingBird")

(defrecord Owl [^FlyingBird name] )

(defn make-Owl
  ([]                (->Owl "Ann Onymous"))
  ([^String itsName] (->Owl itsName))
)

(defmethod getClass Owl [ _ ]
		"Owl"
)

(defmethod getCall Owl [ _ ]
		"Hoo!"
)

;;;; Penguin.clj provides a Penguin "class".
;;;; 
;;;; By: Sarah Whitten
;;;; Date: April 23, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; bring in 'WalkingBird' (to be used as superclass) 
(load "WalkingBird")

;; define 'Penguin' as 'subclass' of WalkingBird
(defrecord Penguin [^WalkingBird name] )

;;; constructors
;;; - default: takes no arguments
;;;   Postcondition: name is initialized to a default value
;;; - explicit: takes one parameter
;;;   Receive: itsName, a String
;;;   Postcondition: name == itsName
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn make-Penguin
  ([]                (->Penguin "Ann Onymous"))
  ([^String itsName] (->Penguin itsName))
)

;;; method to retrieve a Penguin's class
;;; Receive: this, a Penguin object.
;;; Return: "Penguin"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmethod getClass Penguin [ _ ]
  "Penguin"
)

;;; method to retrieve a Penguin's call
;;; Receive: this, a Penguin object.
;;; Return: "Huh-huhh!"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmethod getCall Penguin [ _ ]
  "Huh-huhh!"
)

;;;; WalkingBird.clj provides a WalkingBird "class".
;;;; 
;;;; By: Sarah Whitten
;;;; Date: April 23, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; bring in 'Bird' (to be used as superclass) 
(load "Bird")

;; Define WalkingBird as a subclass of Bird
(defrecord WalkingBird [^Bird name])

(defn make-WalkingBird
		([]                (->WalkingBird "Ann Onymous"))
		([^String itsName] (->WalkingBird itsName))
)

(defmethod getClass WalkingBird [ _ ]
  "WalkingBird"
)

(defmethod getMovement WalkingBird [ _ ]
		"walked by"
)

;; birds.clj illustrates inheritance and polymorphism in Clojure.
;;
;; Output: the results of testing the Bird functions.
;;
;; Usage: clojure -m birds
;;
;; Begun by: Prof. Adams, for CS 214 Lab 10 at Calvin College.
;; Completed by: Sarah Whitten
;; Date: April 23, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns birds
  (:require
      [Bird]
     	[FlyingBird]
     	[WalkingBird]
     	[Duck]
     	[Goose]
     	[Owl]
     	[Penguin]
     	[Ostrich]
     	[Kiwi]
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Function -main tests the classes in the Bird hierarchy.
;;; Output: the results of testing the Bird functions.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [                                ;; Birds
     bird0 (make-Bird)              ; default Bird constructor
     bird1 (make-Bird "Hawkeye")    ; explicit Bird constructor
                                     ;; Ducks
     bird2 (make-Duck)              ; default Duck constructor
     bird3 (make-Duck  "Donald")    ; explicit Duck constructor
                                     ;; Geese
     bird4 (make-Goose)             ; default Goose constructor
     bird5 (make-Goose "Mother")    ; explicit Goose constructor
                                     ;; Owls
     bird6 (make-Owl)               ; default Owl constructor
     bird7 (make-Owl "Woodsey")     ; explicit Owl constructor
     																 ;; Penguins
     bird10 (make-Penguin)					; default Penguin constructor
     bird11 (make-Penguin "Pingu")  ; explicit Penguin constructor
     																 ;; Ostriches
     bird12 (make-Ostrich)					; default Ostrich constructor
     bird13 (make-Ostrich "Orla")   ; explicit Ostrich constructor
     																 ;; Kiwis
     bird14 (make-Kiwi) 						; default Kiwi constructor
     bird15 (make-Kiwi "Kellie")    ; explicit Kiwi constructor
    ]

    (println "\nWelcome to the Bird Park!\n")
   	(println (toString bird0))
   	(println (toString bird1))
    (println)
   	(println (toString bird2))
   	(println (toString bird3))
    (println)
   	(println (toString bird4))
   	(println (toString bird5))
    (println)
   	(println (toString bird6))
  	 (println (toString bird7))
    (println)
    (println (toString bird10))
   	(println (toString bird11))
    (println)
   	(println (toString bird12))
  	 (println (toString bird13))
    (println)
   	(println (toString bird14))
  	 (println (toString bird15))
    (println)
    (println "Goodbye, and come again!\n")
  )
)
 
bash-3.2$ cd ..
bash-3.2$ clojure -m birds

Welcome to the Bird Park!

Ann Onymous Bird just went by and said Squawk!
Hawkeye Bird just went by and said Squawk!

Ann Onymous Duck just flew by and said Quack!
Donald Duck just flew by and said Quack!

Ann Onymous Goose just went by and said Honk!
Mother Goose just flew by and said Honk!

Ann Onymous Owl just flew by and said Hoo!
Woodsey Owl just flew by and said Hoo!

Ann Onymous Penguin just walked by and said Huh-huhh!
Pingu Penguin just walked by and said Huh-huhh!

Ann Onymous Ostrich just walked by and said Snork!
Orla Ostrich just walked by and said Snork!

Ann Onymous Kiwi just walked by and said Reeee!
Kellie Kiwi just walked by and said Reeee!

Goodbye, and come again!

bash-3.2$ exit

Script done on Tue Apr 23 22:35:14 2019
