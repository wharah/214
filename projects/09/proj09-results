Script started on Tue 16 Apr 2019 10:55:09 PM EDT
smw42@gold33:~/CS214/projects/09/java$ cat Max.java
/* Max.java finds the maximum values in Java linked lists.
 *
 * Completed by: Sarah Whitten
 * Date: April 16, 2019
 */

import java.util.*;

public class Max {

  public static void main(String [] args) {

    LinkedList<Integer> list1 = new LinkedList<>();
    LinkedList<Integer> list2 = new LinkedList<>();
    LinkedList<Integer> list3 = new LinkedList<>();
    LinkedList<Integer> list4 = new LinkedList<>();

    list1.add(99);    // 99, 88, 77, 66, 55
    list1.add(88);    // max is first
    list1.add(77);
    list1.add(66);  
    list1.add(55);

    list2.add(55);    // 55, 66, 77, 88, 99
    list2.add(66);    // max is last
    list2.add(77);  
    list2.add(88);  
    list2.add(99);  
  
    list3.add(55);    // 55, 77, 99, 88, 66
    list3.add(77);    // max is in the middle
    list3.add(99);  
    list3.add(88);  
    list3.add(66);  
  
    print(list1); 
    print(list2); 
    print(list3);

    System.out.println("Max of list1: " + Collections.max(list1));
    System.out.println("Max of list2: " + Collections.max(list2));
    System.out.println("Max of list3: " + Collections.max(list3));

    list4.add(55);
    list4.add(66);
    list4.add(77);  
    list4.add(88); 

    System.out.println("Location of 99 in list1: " + search(list1, 99));
    System.out.println("Location of 99 in list2: " + search(list2, 99));
    System.out.println("Location of 99 in list3: " + search(list3, 99));
    System.out.println("Location of 99 in list4: " + search(list4, 99));

  }

  /** print() displays a LinkedList on the console.
   *
   * @param: aList, a LinkedList<Integer>
   * 
   * Postcondition: the Integer values in aList
   *                 have been displayed to System.out,
   *                 separated by spaces.
   */

  public static void print(LinkedList<Integer> aList) 
  {
      Iterator<Integer> listIterator = aList.iterator();
      while (listIterator.hasNext()){
          System.out.print(listIterator.next() + " ");
      }
      System.out.print('\n');
  }

  public static Integer search(LinkedList<Integer> aList, Integer aValue) 
  {
      for (int i = 0; i < aList.size(); i++) {
          if (aList.get(i) == aValue) {
            return i;
          }
      }
      return -1;
  }
}

smw42@gold33:~/CS214/projects/09/java$ javac -deprecation Max.java
smw42@gold33:~/CS214/projects/09/java$ java Max
99 88 77 66 55 
55 66 77 88 99 
55 77 99 88 66 
Max of list1: 99
Max of list2: 99
Max of list3: 99
Location of 99 in list1: 0
Location of 99 in list2: 4
Location of 99 in list3: 2
Location of 99 in list4: -1
smw42@gold33:~/CS214/projects/09/java$ exit

Script done on Tue 16 Apr 2019 10:55:29 PM EDT
Script started on Tue 16 Apr 2019 11:07:05 PM EDT
smw42@gold33:~/CS214/projects/09/ada$ cat list_package.adb list_package.ads max. 
adb
-- list_package.adb defines Ada linked list operations.
--
-- Completed by: Sarah Whitten
-- Date: April 16, 2019
-------------------------------------------------------

with Ada.Text_IO, Ada.Integer_Text_IO;
use Ada.Text_IO, Ada.Integer_Text_IO;

package body List_Package is

  -----------------------------------------------------
  -- Initialize a list                                -
  -- Receive: aList, a List.                          -
  -- Pre: aList is uninitialized.                     -
  -- Post: aList%itsFirst == aList%itsLast == NULL && -
  --        aList%itsLength == 0.                     -
  -----------------------------------------------------
  procedure Init(A_List : out List) is
  begin
    A_List.Its_First := null;
    A_List.Its_Last := null;
    A_List.Its_Length := 0;
  end Init;

  ------------------------------------------------
  -- Is a list empty?                            -
  -- Receive: aList, a List.                     -
  -- Return: true, iff aList contains no values. -
  ------------------------------------------------
  function Empty(A_List : in List) return Boolean is
  begin
    return A_List.Its_Length = 0;
  end Empty;

  -------------------------------------
  -- How many values are in a list?   -
  -- Receive: aList, a List.          -
  -- Return: aList%itsLength.         -
  -------------------------------------
  function Length(A_List : in List) return Integer is
  begin
    return A_List.Its_Length;
  end Length;

  ----------------------------------------
  -- Append a value to a list.           -
  -- Receive: aValue, an integer,        -
  -- Passback: aList, containing aValue. -
  ----------------------------------------
  procedure Append(A_Value : in Integer; A_List : in out List) is
    Temp_Ptr : constant Node_Ptr := new List_Node;
  begin
    Temp_Ptr.Its_Value := A_Value;
    Temp_Ptr.Its_Next := null;

    if A_List.Its_Length = 0 then
       A_List.Its_First := Temp_Ptr;
    else
       A_List.Its_Last.Its_Next := Temp_Ptr;
    end if;

    A_List.Its_Last := Temp_Ptr;

    A_List.Its_Length := A_List.Its_Length + 1;
  end Append;

  -------------------------------------
  -- Display the values in a list.    -
  -- Receive: aList, a List.          -
  -- Output: the values in aList.     -
  -------------------------------------

  procedure Put(A_List : in List) is
      Temp_Ptr : Node_Ptr := A_List.Its_First;
  begin
        while Temp_Ptr /= null loop
            Put(" "); Put(Temp_Ptr.Its_Value);
            Temp_Ptr := Temp_Ptr.Its_Next;
        end loop;
  end Put;

  ---------------------------------------
  -- Find the maximum value in a list.  -
  -- Receive: aList, a List.            -
  -- Return: the maximum value in aList.-
  ---------------------------------------

  function Max(A_List : in List) return Integer is
      Temp_Ptr : Node_Ptr := A_List.Its_First;
      Max_Value : Integer := -99999;
  begin
      while Temp_Ptr /= null loop
          if Temp_Ptr.Its_Value > Max_Value then
              Max_Value := Temp_Ptr.Its_Value;
          end if;
          Temp_Ptr := Temp_Ptr.Its_Next;
      end loop;
      return Max_Value;
  end Max;

  -------------------------------------------
  -- Return the index of the given element. - 
  -- Receive: A_List, a List.               -
  -- Return: the index of the given element.-
  -------------------------------------------

  function Search(A_List : in List; A_Value : in Integer) return Integer is
    Temp_Ptr : Node_Ptr := A_List.Its_First;
    Return_Value : Integer := 1;
  begin
    while Temp_Ptr /= null loop
      if Temp_Ptr.Its_Value = A_Value then
        return Return_Value;
      end if;
      Temp_Ptr := Temp_Ptr.Its_Next;
      Return_Value := Return_Value + 1;
    end loop;
    return -1;
  end Search;

end List_Package;

-- list_package.ads declares an Ada linked list and its operations.
--
-- Completed by: Sarah Whitten
-- Date: April 16, 2019
------------------------------------------------------------------

package List_Package is

  -- the list-type itself (public)
  type List is private;

  -----------------------------------------------------
  -- Initialize a list                                -
  -- Receive: aList, a List.                          -
  -- Pre: aList is uninitialized.                     -
  -- Post: aList%itsFirst == aList%itsLast == NULL && -
  --        aList%itsLength == 0.                     -
  -----------------------------------------------------
  procedure Init(A_List: out List);


  ------------------------------------------------
  -- Is a list empty?                            -
  -- Receive: aList, a List.                     -
  -- Return: true, iff aList contains no values. -
  ------------------------------------------------
  function Empty(A_List: in List) return Boolean;

  -------------------------------------
  -- How many values are in a list?   -
  -- Receive: aList, a List.          -
  -- Return: aList%itsLength.         -
  -------------------------------------
  function Length(A_List : in List) return Integer;


  ----------------------------------------
  -- Append a value to a list.           -
  -- Receive: aValue, an integer,        -
  -- Passback: aList, containing aValue. -
  ----------------------------------------
  procedure Append(A_Value : in Integer; A_List: in out List);


  -------------------------------------
  -- Display the values in a list.    -
  -- Receive: aList, a List.          -
  -- Output: the values in aList.     -
  -------------------------------------

  procedure Put(A_List : in List);

  ---------------------------------------
  -- Find the maximum value in a list.  -
  -- Receive: aList, a List.            -
  -- Return: the maximum value in aList.-
  ---------------------------------------

  function Max(A_List : in List) return Integer;

  -------------------------------------------
  -- Return the index of the given element. - 
  -- Receive: A_List, a List.               -
  -- Return: the index of the given element.-
  -------------------------------------------

  function Search(A_List : in List; A_Value : in Integer) return Integer;

 private
    type List_Node;
    type Node_Ptr is access List_Node;
    type List_Node is
        record
            Its_Value : Integer;
            Its_Next : Node_Ptr;
        end record;   
    type List is
        record
            Its_First : Node_Ptr;
            Its_Last : Node_Ptr;
            Its_Length : Integer;
        end record;

end List_Package;

-- max.adb finds the max of a list of integers. 
-- 
-- Completed by: Sarah Whitten
-- Date: April 16, 2019
-------------------------------------------------- 
 
with Ada.Text_IO, Ada.Integer_Text_IO, List_Package; 
use Ada.Text_IO, Ada.Integer_Text_IO, List_Package; 
 
procedure Max is 
                              -- define 3 lists 
  List1, List2, List3, List4 : List; 
 
begin 
  Init(List1);                -- initialize them 
  Init(List2); 
  Init(List3); 
  Init(List4);
 
  Append(99, List1);          -- 99, 88, 77, 66, 55 
  Append(88, List1);          -- 99 is first 
  Append(77, List1); 
  Append(66, List1); 
  Append(55, List1); 
 
  Append(55, List2);          -- 55, 66, 77, 88, 99 
  Append(66, List2);          -- 99 is last 
  Append(77, List2); 
  Append(88, List2); 
  Append(99, List2); 
 
  Append(55, List3);          -- 55, 77, 99, 88, 66 
  Append(77, List3);          -- 99 is in the middle 
  Append(99, List3); 
  Append(88, List3); 
  Append(66, List3); 


  Append(55, List4);          -- 55, 77, 11, 88, 66 
  Append(77, List4);          -- 99 is not present
  Append(11, List4); 
  Append(88, List4); 
  Append(66, List4);
 
  List_Package.Put(List1); New_Line;       -- output the 3 lists 
  List_Package.Put(List2); New_Line; 
  List_Package.Put(List3); New_Line; 
  List_Package.Put(List4); New_Line;
                              -- display their maxima 
  Put("The maximum value in list 1 is ");  
  Put( Max(List1) ); 
  New_Line; 
  Put("The maximum value in list 2 is "); 
  Put( Max(List2) );
  New_Line; 
  Put("The maximum value in list 3 is ");
  Put( Max(List3) );
  New_Line; 

  Put("The index of 99 in list 1 is ");
  Put( Search(List1, 99) );
  New_Line;
  Put("The index of 99 in list 2 is ");
  Put( Search(List2, 99) );
  New_Line;
  Put("The index of 99 in list 3 is ");
  Put( Search(List3, 99) );
  New_Line;
  Put("The index of 99 in list 4 is ");
  Put( Search(List4, 99) );
  New_Line;

  -- Node_Ptr := List1;
  -- the above line doesn't work becase Node_Ptr isn't visible
  -- (because it's a private declaration)
 
end Max; 

smw42@gold33:~/CS214/projects/09/ada$ gnatmake max.adb
gnatmake: "max" up to date.
smw42@gold33:~/CS214/projects/09/ada$ ./max
          99          88          77          66          55
          55          66          77          88          99
          55          77          99          88          66
          55          77          11          88          66
The maximum value in list 1 is          99
The maximum value in list 2 is          99
The maximum value in list 3 is          99
The index of 99 in list 1 is           1
The index of 99 in list 2 is           5
The index of 99 in list 3 is           3
The index of 99 in list 4 is          -1
smw42@gold33:~/CS214/projects/09/ada$ exit

Script done on Tue 16 Apr 2019 11:07:34 PM EDT
Script started on Wed 17 Apr 2019 02:19:05 PM EDT
smw42@maroon28:~/CS214/projects/09/clojure$ cat src/listOps.clj src/max.clj
;; listOps.clj is a Clojure "module" for list operations.
;;
;; Completed by: Sarah Whitten
;; Date: April 16, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; maxOf2() finds the maximum of two values.  
;; Receive: val1, val2, two values.  
;; PRE: val1 and val2 can be compared using >.
;; Return: the maximum of val1 and val2. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn maxOf2 [val1 val2]
  (if (> val1 val2)      ; if val1 > val2
    val1                 ;   return val1
    val2                 ; else return val2
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; listMax() finds the maximum value in a list.
;; Receive: aList, a list of values.    
;; PRE: aList is a list 
;;      values in aList can be compared using >.
;; Return: the maximum value in aList.         
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn listMax [aList]
		(if (list? aList)
  		(let [ firstVal (first aList) ]
  				(if (= (count aList) 0)
  						"nonexistent!"
  						(if (= (count aList) 1)
										firstVal
										(maxOf2 firstVal (listMax (rest aList)))
								)
  				)
		  )
				nil
		)
)

(defn search2 [aList aValue iteration]
		(let [ firstVal (first aList) ]
  		(if (= (count aList) 0)
  				-1
  				(if (= firstVal aValue)
  						iteration
  						(search2 (rest aList) aValue (+ iteration 1))
  				)
  		)
  )
)

(defn search [aList aValue]
		(if (list? aList)
				(search2 aList aValue 0)
		)
)

;; max.clj tests a function to search a list for its maximum value.
;;
;; Output: three lists, and 
;;          the results of calling a maxList() function on them.
;;
;; Usage: clojure -m max
;;
;; Completed by: Sarah Whitten
;; Date: April 16, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns max)

(load "listOps")                      ; load module

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function -main tests function listMax(). 
;; Output: the results of testing listMax() on various lists.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [ 
      list1 '(99 88 77 66 55)        ; max is first value
      list2 (list 55 66 77 88 99)    ; max is last value
      list3 (list 55 77 99 88 66)    ; max is middle value
      emptyList '()                  ; list is empty
      list4 (list 55 77 44 88 66)
    ]

    (println)
    (println "list1: " list1)        ; print list1,
    (println "list2: " list2)        ;   list2,
    (println "list3: " list3)        ;   list3,
    (println "empty: " emptyList)    ;   list3,
    (println)                        ;   and their maxima
	   (println "The max value in list1 is: " (listMax list1))
	   (println "The max value in list2 is: " (listMax list2))
	   (println "The max value in list3 is: " (listMax list3))
	   (println)
	   (println "The max of an empty list is: " (listMax emptyList))
	   (println)

	   (println "Location of max in list1 is: " (search list1 99)) ;  0
	   (println "Location of max in list2 is: " (search list2 99)) ;  4
	   (println "Location of max in list3 is: " (search list3 99)) ;  2
	   (println "Location of max in list4 is: " (search list4 99)) ; -1
  )
)
smw42@maroon28:~/CS214/projects/09/clojure$ clojure -m max

list1:  (99 88 77 66 55)
list2:  (55 66 77 88 99)
list3:  (55 77 99 88 66)
empty:  ()

The max value in list1 is:  99
The max value in list2 is:  99
The max value in list3 is:  99

The max of an empty list is:  nonexistent!

Location of max in list1 is:  0
Location of max in list2 is:  4
Location of max in list3 is:  2
Location of max in list4 is:  -1
smw42@maroon28:~/CS214/projects/09/clojure$ exit

Script done on Wed 17 Apr 2019 02:19:25 PM EDT
Script started on Wed 17 Apr 2019 02:22:03 PM EDT
smw42@maroon28:~/CS214/projects/09/ruby$ cat List.rb max.rb
# List.rb implements a linked list structure in Ruby.
#
# Completed by: Sarah Whitten
# Date: April 16, 2019
#######################################################

require 'test/unit/assertions'
include Test::Unit::Assertions

class List

   # initialize a List to be empty
   # Postcondition: first == nil and last == nil and length == 0

   def initialize
      @first = nil
      @last = nil
      @length = 0
   end

   attr_reader :length

   # Am I empty?
   # Return: length == 0
   def empty?
      @length == 0
   end
  
   # append a value to me
   # Receive: value, the item to be appended
   # Postcondition: my last item is value and
   #                 my length is one more than it was
   def append(value)
      newNode = Node.new(value, nil)

      if empty?
         @first = newNode
      else
         @last.next = newNode      
      end

      @last = newNode
      @length += 1
      self
   end


   # print my items
   # Postcondition: my items have been displayed to the screen

   def print
      temp = @first
      while !temp.nil?
         printf " #{temp.value}"
         temp = temp.next
      end 
   end

   # find my maximum item
   # Return: my maximum item

   def max
      temp = @first
      maxValue = -99999
      while !temp.nil?
         if temp.value > maxValue
            maxValue = temp.value
         end
         temp = temp.next
      end
      return maxValue
   end

   # find the index of an element
   # Return: the index of an element

   def Search(value)
      temp = @first
      returnVal = -1
      index = 0
      while !temp.nil?
         if temp.value == value
            returnVal = index
         end
         temp = temp.next
         index = index + 1
      end
      return returnVal
   end

   class Node
      def initialize(item, link)
         @value = item
         @next = link
      end
   
      attr_reader :value
      attr_accessor :next
   end

end

# max.rb tests a Ruby linked list.
#
# Completed by: Sarah Whitten
# Date: April 16, 2019

require './List'

list1 = List.new
list2 = List.new
list3 = List.new
list4 = List.new

list1.append(99).append(88).append(77).append(66).append(55)
list2.append(55).append(66).append(77).append(88).append(99)
list3.append(55).append(77).append(99).append(88).append(66)
list4.append(55).append(77).append(22).append(88).append(66)

list1.print 
puts
puts "Maximum of list1: #{list1.max}"

list2.print 
puts
puts "Maximum of list2: #{list2.max}"

list3.print 
puts
puts "Maximum of list3: #{list3.max}"

puts
puts "Index of 99 in list1: #{list1.Search(99)}"

puts
puts "Index of 99 in list2: #{list2.Search(99)}"

puts
puts "Index of 99 in list3: #{list3.Search(99)}"

puts
puts "Index of 99 in list4: #{list4.Search(99)}"

smw42@maroon28:~/CS214/projects/09/ruby$ ruby max.rb
 99 88 77 66 55
Maximum of list1: 99
 55 66 77 88 99
Maximum of list2: 99
 55 77 99 88 66
Maximum of list3: 99

Index of 99 in list1: 0

Index of 99 in list2: 4

Index of 99 in list3: 2

Index of 99 in list4: -1
smw42@maroon28:~/CS214/projects/09/ruby$ exit

Script done on Wed 17 Apr 2019 02:22:22 PM EDT
