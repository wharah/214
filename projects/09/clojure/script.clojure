Script started on Wed 17 Apr 2019 02:19:05 PM EDT
smw42@maroon28:~/CS214/projects/09/clojure$ cat src/listOps.clj src/max.clj
;; listOps.clj is a Clojure "module" for list operations.
;;
;; Completed by: Sarah Whitten
;; Date: April 16, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; maxOf2() finds the maximum of two values.  
;; Receive: val1, val2, two values.  
;; PRE: val1 and val2 can be compared using >.
;; Return: the maximum of val1 and val2. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn maxOf2 [val1 val2]
  (if (> val1 val2)      ; if val1 > val2
    val1                 ;   return val1
    val2                 ; else return val2
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; listMax() finds the maximum value in a list.
;; Receive: aList, a list of values.    
;; PRE: aList is a list 
;;      values in aList can be compared using >.
;; Return: the maximum value in aList.         
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn listMax [aList]
		(if (list? aList)
  		(let [ firstVal (first aList) ]
  				(if (= (count aList) 0)
  						"nonexistent!"
  						(if (= (count aList) 1)
										firstVal
										(maxOf2 firstVal (listMax (rest aList)))
								)
  				)
		  )
				nil
		)
)

(defn search2 [aList aValue iteration]
		(let [ firstVal (first aList) ]
  		(if (= (count aList) 0)
  				-1
  				(if (= firstVal aValue)
  						iteration
  						(search2 (rest aList) aValue (+ iteration 1))
  				)
  		)
  )
)

(defn search [aList aValue]
		(if (list? aList)
				(search2 aList aValue 0)
		)
)

;; max.clj tests a function to search a list for its maximum value.
;;
;; Output: three lists, and 
;;          the results of calling a maxList() function on them.
;;
;; Usage: clojure -m max
;;
;; Completed by: Sarah Whitten
;; Date: April 16, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns max)

(load "listOps")                      ; load module

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function -main tests function listMax(). 
;; Output: the results of testing listMax() on various lists.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [ 
      list1 '(99 88 77 66 55)        ; max is first value
      list2 (list 55 66 77 88 99)    ; max is last value
      list3 (list 55 77 99 88 66)    ; max is middle value
      emptyList '()                  ; list is empty
      list4 (list 55 77 44 88 66)
    ]

    (println)
    (println "list1: " list1)        ; print list1,
    (println "list2: " list2)        ;   list2,
    (println "list3: " list3)        ;   list3,
    (println "empty: " emptyList)    ;   list3,
    (println)                        ;   and their maxima
	   (println "The max value in list1 is: " (listMax list1))
	   (println "The max value in list2 is: " (listMax list2))
	   (println "The max value in list3 is: " (listMax list3))
	   (println)
	   (println "The max of an empty list is: " (listMax emptyList))
	   (println)

	   (println "Location of max in list1 is: " (search list1 99)) ;  0
	   (println "Location of max in list2 is: " (search list2 99)) ;  4
	   (println "Location of max in list3 is: " (search list3 99)) ;  2
	   (println "Location of max in list4 is: " (search list4 99)) ; -1
  )
)
smw42@maroon28:~/CS214/projects/09/clojure$ clojure -m max

list1:  (99 88 77 66 55)
list2:  (55 66 77 88 99)
list3:  (55 77 99 88 66)
empty:  ()

The max value in list1 is:  99
The max value in list2 is:  99
The max value in list3 is:  99

The max of an empty list is:  nonexistent!

Location of max in list1 is:  0
Location of max in list2 is:  4
Location of max in list3 is:  2
Location of max in list4 is:  -1
smw42@maroon28:~/CS214/projects/09/clojure$ exit

Script done on Wed 17 Apr 2019 02:19:25 PM EDT
